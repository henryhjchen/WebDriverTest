buildscript {
    repositories {
        jcenter()
    }
  dependencies {
    classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.16.1'
  }
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: "com.jfrog.artifactory"

artifactory {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            repoKey = "${artifactory_repoKey}"
            username = "${artifactory_user}"
            password = "${artifactory_password}"            
        }
        defaults {
            publications ('mavenJava')
        }
    }
    resolve {
        repository {
            repoKey = "${artifactory_repoKey}"
            username = "${artifactory_user}"
            password = "${artifactory_password}"
        }
    }
}

sourceCompatibility = 1.8
version = '2.0.0'
group = 'com.ibm.fo'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets {
    main {
        java {
            srcDir 'src/java/testcases'
        }
        resources {
            srcDir 'config'
            srcDir 'etc'
            srcDir 'src/java/testcases'
            
        }
    }
}

repositories {
    maven {
        url "${artifactory_contextUrl}/${artifactory_repoKey}"
        credentials {
            username "${artifactory_user}"
            password "${artifactory_password}"
        }
    }
    mavenCentral()
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

configurations {
	ftpAntTask
}
            
dependencies {
    compile 'com.ibm.mq:headers:7.0'
    compile 'com.ibm.mq:jmqi:7.0'
    compile 'com.ibm.mq:mq:7.0'
    compile 'com.ibm.mq:pcf:7.0'
    compile 'commons-collections:commons-collections:3.2'
    compile 'commons-configuration:commons-configuration:1.10+'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-jxpath:commons-jxpath:1.3+'
    compile 'commons-lang:commons-lang:2.6'
    compile 'commons-net:commons-net:3.0.1'
    compile 'com.jcraft:jsch:0.1.55'
    compile 'dom4j:dom4j:1.6.1'
    compile 'ibatis:ibatis:2.3+'
    compile 'junit:junit:4.11+'
    compile 'log4j:log4j:1.2+'
    compile 'org.apache.ant:ant:1.8.2'
    compile 'org.apache.velocity:velocity:1.7'
    compile 'org.dbunit:dbunit:2.4.9'
    compile 'org.springframework:spring:2.5.6'
    compile 'org.testng:testng:6.8.7'
    compile 'org.apache.servicemix.bundles:org.apache.servicemix.bundles.oro:2.0.8_6'

    compile group: 'org.xmlunit', name: 'xmlunit-core', version: '2.6.2'

    compile group: "com.ibm.dnf", name: "dnfclau", version: "3.1.1"
    compile group: "com.ibm.dni.crypto", name: "dnicsl.impl", version: "3.1.1"
    compile group: "com.ibm.dni.cfg", name: "dnipcfg", version: "3.1.1"
    compile group: "com.ibm.fo", name: "baseutil", version: "1.0", changing: true
    compile group: "com.ibm.fo", name: "denali-tsr", version: "1.0+", changing: true
    
    runtime 'com.ibm.mq:commonservices:7.0'
    runtime 'com.ibm.mq:connector:7.0'
    runtime 'com.ibm.mq:headers:7.0'
    runtime 'com.ibm.mq:jmqi:7.0'
    runtime 'com.ibm.mq:mq:7.0'
    runtime 'com.ibm.mq:pcf:7.0'
    runtime 'commons-collections:commons-collections:3.2'
    runtime 'commons-configuration:commons-configuration:1.10+'
    runtime 'commons-dbcp:commons-dbcp:1.4'
    runtime 'commons-io:commons-io:2.4'
    runtime 'commons-jxpath:commons-jxpath:1.3+'
    runtime 'commons-lang:commons-lang:2.6'
    runtime 'commons-net:commons-net:3.0.1'
    runtime 'com.jcraft:jsch:0.1.55'
    runtime 'db2jcc:db2jcc:11'
    runtime 'db2jcc_license_cisuz:db2jcc_license_cisuz:11'
    runtime 'dom4j:dom4j:1.6.1'
    runtime 'junit:junit:4.11+'
    runtime 'log4j:log4j:1.2+'
    runtime 'org.apache.ant:ant:1.8.2'
    runtime 'org.apache.velocity:velocity:1.7'
    runtime 'org.dbunit:dbunit:2.4.9'
    runtime 'org.springframework:spring:2.5.6'
    runtime 'org.testng:testng:6.8.7'
    runtime 'jaxen:jaxen:1.1'
    runtime 'org.apache.servicemix.bundles:org.apache.servicemix.bundles.oro:2.0.8_6'

    ftpAntTask("org.apache.ant:ant-commons-net:1.8.4") {
        module("commons-net:commons-net:2.0") {
            dependencies "oro:oro:2.0.8:jar"
        }
    }
}







jar {
		manifest {
        attributes 'Implementation-Title': 'dni-test-cases', 'Implementation-Version': 1.0
    }
		baseName = 'dni-test-cases'
		includeEmptyDirs=false
		dependsOn classes
		include('**/dnf/er/mi/us16808/US16808*.class')
    exclude('**/dnf/*.class')
    exclude('**/dni/*.class')
    exclude('**/tools/*.class')
    exclude('conf/**')
    exclude('firefox.profile/**')
}

publishing {
		publications {
    	mavenJava(MavenPublication) {
      	groupId 'com.ibm.fo'
        artifactId 'dni-test-cases'
        version '1.0'

        artifact jar
      }
		}
}

task setPurpose {
	logger.lifecycle('[echo] Build purpose = ' + System.properties['purpose'])
}

setPurpose.onlyIf { System.properties['purpose'] }

task setbrk(type: Copy) {
	if (System.properties['fnTargetEnv']) {
		def testEnvMatcher = System.properties['fnTargetEnv'] =~ /(FN)*(.+)(\s-)(.+)/
		System.properties['testEnvName'] = testEnvMatcher[0][2]
	}

	logger.lifecycle('testEnvName = ' + System.properties['testEnvName'])
	
     from ('etc/conf'){
         include 'TestEnvironment.properties'
     }
     into 'config'
     filter(org.apache.tools.ant.filters.ExpandProperties, project: ant.antProject)
     
     outputs.upToDateWhen { false }
}

 task testBucket(type: Test) {
	description 'Run with: ./gradlew testBucket -PtestcaseXML=bucket/${testCaseList}'
	forkEvery = 1
	maxHeapSize = '512m'

	testClassesDirs = sourceSets.main.output.classesDirs

	beforeTest { descriptor ->
		logger.lifecycle("Running test: " + testcaseXML)
	}

	doFirst{
		def testcases = new XmlParser().parse("$projectDir/"+testcaseXML)
		LinkedList<String> testlist = new LinkedList<String>()

		println "Parsing TestCase XML file."

		testcases.Testcase.each{
			println it.text().replaceAll("\\.", "\\/")+".class"
			testlist.add(it.text().replaceAll("\\.", "\\/")+".class")
		}
		includes = testlist
	}
}

task testSingle (type: Test) {
  description 'Run with: ./gradlew testSingle -PtestClass=${testClass}'
  
	testClassesDirs = sourceSets.main.output.classesDirs
	
	//toolkit
	if (System.properties['mbVersion']) {
		jvmArgs '-Dmb.version=' + System.properties['mbVersion']
		jvmArgs '-Dmbt.dir=' + System.properties['mbToolkitDir']
	}
	
	jvmArgs '-Dibm.swapLF=true'
	
	beforeTest { descriptor ->
      logger.lifecycle("Running test: " + testClass)
   }
   		
	doFirst{
		testClass = testClass.replaceAll("\\.", "\\/")+".class"		
		include testClass
	}
} 

tasks.withType(Test) {
	testLogging {
		events 'started', 'passed'
	}
}

def loadProperties(String sourceFileName) {
    def config = new Properties()
    def propFile = new File( buildFile.parent + "/" + sourceFileName)
//    if (propFile.canRead()) {
        config.load(new FileInputStream(propFile))
        for (Map.Entry property in config) {
            project.ext[property.key] = property.value
//        }
    }
}
